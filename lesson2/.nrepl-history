(require '(yada [yada :as yada]))
(def svr
  (yada/listener
    ["/" (yada/resource
           {:methods
            {:get
             {:produces "text/plain"
              :response "Hello World!"}}})]
    {:port 3000}))
svr
:server svr
:close svr
(def svr
  (yada/listener
    ["/" (yada/resource
           {:methods
            {:get
             {:produces "text/plain"
              :response "Hello World!"}}})]
    {:port 3000}))
((:close svr))
(def svr
  (yada/listener
    ["/" (yada/resource
           {:methods
            {:get
             {:produces "text/plain"
              :response "Hello World!"}}})]
    {:port 3000}))
curl http://localhost:3000/
(def svr
  (yada/listener
    ["/" (yada/resource
           {:methods
            {:get
             {:produces "text/plain"
              :parameters {:query {:name String}} ;; We will receive name as a query param
              :response (format "Hello %s. How are you?" 
                                (-> ctx :parameters :query :name))}}})]
    {:port 3000}))
(def svr
  (yada/listener
    ["/" (yada/resource
           {:methods
            {:get
             {:produces "text/plain"
              :parameters {:query {:name String}} ;; We will receive name as a query param
              :response (fn [ctx]
                          (format "Hello %s. How are you?" 
                                  (-> ctx :parameters :query :name)))}}})]
    {:port 3000}))
((:close svr))
(def svr
  (yada/listener
    ["/" (yada/resource
           {:methods
            {:get
             {:produces "text/plain"
              :parameters {:query {:name String}} ;; We will receive name as a query param
              :response (fn [ctx]
                          (format "Hello %s. How are you?" 
                                  (-> ctx :parameters :query :name)))}}})]
    {:port 3000}))
(defn start-server []
  (def svr
    (yada/listener
      ["/" (yada/resource
             {:methods
              {:get
               {:produces "text/plain"
                :response "Hello World!"}}})]
      {:port 3000}))
(defn stop-server []
 ((:close svr))
((:close svr))
(defn start-server []
  (def svr
    (yada/listener
      ["/" (yada/resource
             {:methods
              {:get
               {:produces "text/plain"
                :response "Hello World!"}}})]
      {:port 3000}))
(defn stop-server []
 ((:close svr))
(defn start-server []
  (def svr
    (yada/listener
      ["/" (yada/resource
             {:methods
              {:get
               {:produces "text/plain"
                :response "Hello World!"}}})]
      {:port 3000})))
(defn stop-server []
 ((:close svr))
)
(defn restart []
 (stop-server)
 (start-server))
(restart)
 (start-server))
 (start-server)
(restart)
 (start-server)
 (stop-server)
(restart)
(macro-expand
)
(def ctx {:parameters 
           {:query
             {:name "value"}}})
(-> ctx :parameters :query :name)
;; is equivalent to
(:name (:query (:parameters ctx)))
(set-env!  
  :resource-paths #{"src"}
  :dependencies '[[yada "1.2.6"]])
(web-server/start-server)
(web-server/start)
(web-server/restart)
(web-server/start)
(web-server/restart)
(get {"1" 2} "adssa")
